using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using Telerik.Windows.Controls.Charting;
using Telerik.Windows.Controls;

namespace SilverlightApplication
{
    public partial class InLine : UserControl
    {
        public InLine()
        {
            InitializeComponent();

            setChart("测试");
            ConfigureChart();
        }



        private void ConfigureChart()
        {
            LineSeriesDefinition lineSeries = new LineSeriesDefinition();
            lineSeries.ShowItemLabels = false;
            lineSeries.ShowPointMarks = false;

            radChart.DefaultView.ChartArea.NoDataString = "正在载入图形数据，请等待...";


            radChart.DefaultView.ChartArea.Padding = new Thickness(5, 10, 20, 5);

            radChart.DefaultView.ChartArea.LabelFormatBehavior = LabelFormatBehavior.None;
            radChart.SamplingSettings.SamplingThreshold = 3000; //此属性用于控制动画的时间
            radChart.DefaultView.ChartArea.EnableAnimations = true; //此属性控制动画效果
            radChart.DefaultView.ChartArea.EnableTransitionAnimations = true;

            radChart.DefaultView.ChartLegend.Visibility = Visibility.Collapsed;
        }

        private void setChart(string title)
        {
            radChart.DefaultView.ChartTitle.Content = title;
            radChart.Height = 600;
            this.radChart.DefaultSeriesDefinition.LegendDisplayMode = LegendDisplayMode.None;
            // this.radChart.DefaultView.ChartLegendPosition = Telerik.Windows.Controls.Dock.Bottom;
            radChart.DefaultView.ChartArea.AxisX.MajorGridLinesVisibility = Visibility.Visible;
            radChart.DefaultView.ChartArea.AxisY.StripLinesVisibility = Visibility.Collapsed;
            radChart.DefaultView.ChartArea.AxisY.MajorGridLinesVisibility = Visibility.Visible;
            radChart.DefaultView.ChartArea.AxisY.MinorGridLinesVisibility = Visibility.Collapsed;
            this.radChart.DefaultView.ChartArea.AxisY.AxisStyles.GridLineStyle = this.Resources["GridLineStyle"] as Style;
            this.radChart.DefaultView.ChartArea.AxisX.AxisStyles.GridLineStyle = this.Resources["GridLineStyle"] as Style;

            radChart.DefaultView.ChartTitle.HorizontalAlignment = HorizontalAlignment.Center;

            radChart.DefaultView.ChartArea.AxisX.AutoRange = true;
            radChart.DefaultView.ChartArea.AxisX.StripLinesVisibility = Visibility.Visible;
            radChart.DefaultView.ChartArea.AxisY.StripLinesVisibility = Visibility.Visible;
            radChart.DefaultView.ChartTitle.HorizontalAlignment = HorizontalAlignment.Center;
            radChart.DefaultView.ChartLegend.Header = "图例";
            //radChart.DefaultView.ChartLegend.Visibility  = false;
            radChart.DefaultView.ChartLegend.UseAutoGeneratedItems = true;
            //X轴标题
            radChart.DefaultView.ChartArea.AxisX.Title = "时间";
            radChart.DefaultView.ChartArea.AxisX.LayoutMode = AxisLayoutMode.Between;
            //Y轴标题
            radChart.DefaultView.ChartArea.AxisY.Title = "温度";
            addSerise();
        }

        private void addSerise()
        {
            DataSeries series = new DataSeries();
            series.Definition = new LineSeriesDefinition();
            series.LegendLabel = "温度";

            for (int i = 1; i < 20; i++)
            {
                series.Add(new DataPoint(DateTime.Now.AddMinutes(i).ToString("HH:mm:00"), i * i));
            }
            radChart.DefaultView.ChartArea.DataSeries.Add(series);
        }
    }

    public class Pri
    {
        private ObservableCollection<string> m_Descriptions;

        public ObservableCollection<string> Descriptions
        {
            get { return m_Descriptions; }
            set { m_Descriptions = value; }
        }


        string name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        double count;

        public double Count
        {
            get { return count; }
            set { count = value; }
        }

        double[] val;

        public double[] Val
        {
            get { return val; }
            set { val = value; }
        }
    }

    public class UnitOBJECT
    {
        double power;
        public double Power { get { return power; } set { power = value; } }
        double flow;
        public double Flow { get { return flow; } set { flow = value; } }
        double pressure;
        public double Pressure { get { return pressure; } set { pressure = value; } }
        double temperature;
        public double Temperature { get { return temperature; } set { temperature = value; } }
        double reheatTemperature;
        public double ReheatTemperature { get { return reheatTemperature; } set { reheatTemperature = value; } }
        double vacuum;
        public double Vacuum { get { return vacuum; } set { vacuum = value; } }
        double efficiency;
        public double Efficiency { get { return efficiency; } set { efficiency = value; } }
        double heatconsumption;
        public double Heatconsumption { get { return heatconsumption; } set { heatconsumption = value; } }
        double coalconsumption;
        public double Coalconsumption { get { return coalconsumption; } set { coalconsumption = value; } }
    }
}
